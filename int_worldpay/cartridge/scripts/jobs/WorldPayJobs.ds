var Transaction = require('dw/system/Transaction');
var OrderManager = require('dw/order/OrderMgr');

function updateOrderStatus(order, serviceResponseLastEvent, serviceResponse) : Boolean {
	//OrderStatus.ds
	var orderStatus=order.status.displayValue,
	 	updateStatus = serviceResponseLastEvent,
	 	status,
	 	returnStatus,
	 	updateOrderStatusResult;
	 	
	//Expression 	
	if(dw.web.Resource.msg('notification.paymentStatus.AUTHORISED','worldpay',null).equalsIgnoreCase(updateStatus)){
		//Expression
		if(!("OPEN".equalsIgnoreCase(orderStatus)|| "COMPLETED".equalsIgnoreCase(orderStatus)|| "NEW".equalsIgnoreCase(orderStatus))){
			//PlaceOrder
			Transaction.wrap(function(){
				status = OrderManager.placeOrder(order);
			});
			if(status.isError()){
				//ERROR
				return false;
			}	
		}
		
		//UpdateOrderStatus.ds
		Transaction.wrap(function(){
			updateOrderStatusResult = require('int_worldpay/cartridge/scripts/order/UpdateOrderStatus').updateOrderStatus(order,serviceResponse,updateStatus,null);	
		});
		return updateOrderStatusResult.success;
	}	
	//Expression
	else if(dw.web.Resource.msg('notification.paymentStatus.REFUSED','worldpay',null).equalsIgnoreCase(updateStatus)){
		//Expression
		if(!("CANCELLED".equalsIgnoreCase(orderStatus) || "FAILED".equalsIgnoreCase(orderStatus))){
			//FailOrder
			Transaction.wrap(function(){
				status = OrderManager.failOrder(order);
			});
			if(status.isError()){
				//ERROR
				return false;
			}
		}
		
		//UpdateOrderStatus.ds
		Transaction.wrap(function(){
			updateOrderStatusResult = require('int_worldpay/cartridge/scripts/order/UpdateOrderStatus').updateOrderStatus(order,serviceResponse,updateStatus,null);
		});
		return updateOrderStatusResult.success;
	}
	//Expression
	else if(dw.web.Resource.msg('notification.paymentStatus.CANCELLED','worldpay',null).equalsIgnoreCase(updateStatus)){
		//Expression
		if("CANCELLED".equalsIgnoreCase(orderStatus)){
			//CancelOrder
			Transaction.wrap(function(){
				if(order.getStatus()==dw.order.Order.ORDER_STATUS_CREATED){
					status = OrderManager.failOrder(order);
				}
				else{
					status = OrderManager.cancelOrder(order);
				}
				dw.system.Logger.debug("World Pay Job | Update Order Status : CANCELLED : {0} : Status : {1}",order.orderNo,status.message); 
			});
			if(status.isError()){
				//ERROR
				return false;
			}
		}
		//UpdateOrderStatus.ds
			updateOrderStatusResult = require('int_worldpay/cartridge/scripts/order/UpdateOrderStatus').updateOrderStatus(order,serviceResponse,updateStatus,null);
		return updateOrderStatusResult.success;
	}
	//Expression
	else if(dw.web.Resource.msg('notification.paymentStatus.EXPIRED','worldpay',null).equalsIgnoreCase(updateStatus)){
		//FailOrder
		Transaction.wrap(function(){
			status = OrderManager.failOrder(order);
		});
		if(status.isError()){
		//ERROR
		return false;
		}
		//UpdateOrderStatus.ds
		Transaction.wrap(function(){
			updateOrderStatusResult = require('int_worldpay/cartridge/scripts/order/UpdateOrderStatus').updateOrderStatus(order,serviceResponse,updateStatus,null);
		});
		return updateOrderStatusResult.success;
	}
	//Expression
	else if(dw.web.Resource.msg('notification.paymentStatus.CAPTURED','worldpay',null).equalsIgnoreCase(updateStatus) && ('CREATED').equalsIgnoreCase(orderStatus)){
		//PlaceOrder
		Transaction.wrap(function(){
			status = OrderManager.placeOrder(order);
		});
		if(status.isError()){
			//ERROR
			return false;
		}
		else{
			//UpdateOrderStatus.ds
			Transaction.wrap(function(){
				updateOrderStatusResult = require('int_worldpay/cartridge/scripts/order/UpdateOrderStatus').updateOrderStatus(order,serviceResponse,updateStatus,null);
			});
			return updateOrderStatusResult.success;		
		}		
	}
	else{
		//UpdateOrderStatus.ds
		Transaction.wrap(function(){
			updateOrderStatusResult = require('int_worldpay/cartridge/scripts/order/UpdateOrderStatus').updateOrderStatus(order,serviceResponse,updateStatus,null);
		});
		return updateOrderStatusResult.success;		
	}
}

function addOrUpdateToken(customerInformation , serviceResponse,cardNumber, cardType){
	var currentCustomer = customerInformation;
	//Expression
	if(currentCustomer.profile.customerNo.equals(serviceResponse.authenticatedShopperID.valueOf().toString())){
		//GetCustomerPaymentInstruments
		var customerPaymentInstruments = currentCustomer.getProfile().getWallet().getPaymentInstruments(dw.order.PaymentInstrument.METHOD_CREDIT_CARD);
		//GetPaymentcardToken
		var getPaymentCardTokenResult = require('int_worldpay/cartridge/scripts/pipelets/GetPaymentCardToken').getPaymentCardToken(customerPaymentInstruments,cardNumber,cardType);
		if(!getPaymentCardTokenResult.success){
			return;
		}
		var paymentTokenID = getPaymentCardTokenResult.paymentTokenID,
			matchedCustomerPaymentInstrument = getPaymentCardTokenResult.matchedCustomerPaymentInstrument;		
		
		//Expression
		if(!empty(paymentTokenID) && paymentTokenID.equals(serviceResponse.paymentTokenID)){
			var cardExpirationMonth = Number(serviceResponse.cardExpiryMonth.valueOf()),
				cardExpirationYear = Number(serviceResponse.cardExpiryYear.valueOf()),
				cardHolderName = serviceResponse.cardHolderName.valueOf().toString();
			if(matchedCustomerPaymentInstrument.getCreditCardExpirationMonth() != cardExpirationMonth ||
				matchedCustomerPaymentInstrument.getCreditCardExpirationYear() != cardExpirationYear ||
				!matchedCustomerPaymentInstrument.getCreditCardHolder().equalsIgnoreCase(cardHolderName)){	
				Transaction.begin();
				currentCustomer.getProfile().getWallet().removePaymentInstrument(matchedCustomerPaymentInstrument);
				//CreateCustomerPaymentInstrument
				var createdPaymentInstrument = currentCustomer.getProfile().getWallet().createPaymentInstrument(dw.order.PaymentInstrument.METHOD_CREDIT_CARD);
				//SaveCustomerCreditCard
				var saveCustomerCreditCardResult = require('int_worldpay/cartridge/scripts/pipelets/SaveCustomerCreditCard').saveCustomerCreditCard(createdPaymentInstrument,
																																				serviceResponse.paymentTokenID.valueOf().toString(),
																																				serviceResponse.cardNumber.valueOf().toString(),
																																				cardExpirationMonth,
																																				cardExpirationYear,
																																				serviceResponse.cardBrand.valueOf().toString(),
																																				cardHolderName);
				Transaction.commit();
			}
			return;
		}
		else{
			//Expression
			if(matchedCustomerPaymentInstrument!=null){
				//Expression
				if(empty(paymentTokenID)){
					//SaveCustomerCreditCard.ds
					var saveCustomerCreditCardResult;
					Transaction.wrap(function(){
						saveCustomerCreditCardResult = require('int_worldpay/cartridge/scripts/pipelets/SaveCustomerCreditCard').saveCustomerCreditCard(matchedCustomerPaymentInstrument,serviceResponse.paymentTokenID.valueOf().toString(),null,null,null,null,null);
					});
					return;
				}
				else{
					return;
				}
			}
			else{
				//Expression
				if(!empty(serviceResponse.cardNumber)){
					Transaction.begin();
					//CreateCustomerPaymentInstrument
					var createdPaymentInstrument = currentCustomer.getProfile().getWallet().createPaymentInstrument(dw.order.PaymentInstrument.METHOD_CREDIT_CARD);
					//SaveCustomerCreditCard
					var saveCustomerCreditCardResult = require('int_worldpay/cartridge/scripts/pipelets/SaveCustomerCreditCard').saveCustomerCreditCard(createdPaymentInstrument,
																																					serviceResponse.paymentTokenID.valueOf().toString(),
																																					serviceResponse.cardNumber.valueOf().toString(),
																																					Number(serviceResponse.cardExpiryMonth.valueOf()),
																																					Number(serviceResponse.cardExpiryYear.valueOf()),
																																					serviceResponse.cardBrand.valueOf().toString(),
																																					serviceResponse.cardHolderName.valueOf().toString());
					if(saveCustomerCreditCardResult.success){
						Transaction.commit();
					}
					else{
						Transaction.rollback();
					}
					return;
				}
				else{
					return;
				}
			}
		}
	}
	else{
		return;
	}
}

function updateOrderToken(paymentInstrument,serviceResponse) : Object {
	var paymentInstr = paymentInstrument;
	//Expression
	if(paymentInstr!=null && !empty(serviceResponse)){
		//Expression
		if(empty(paymentInstr.creditCardToken)){
			//Assign
			Transaction.wrap(function(){
				paymentInstr.setCreditCardToken(serviceResponse.paymentTokenID);
			});
		}
		//Assign
		var tokenExpiryCal = new dw.util.Calendar();
		tokenExpiryCal.set(serviceResponse.paymentTokenExpiryYear, serviceResponse.paymentTokenExpiryMonth, serviceResponse.paymentTokenExpiryDay);
		//Assign
		Transaction.wrap(function(){
			paymentInstr.custom.wpTokenEvent = serviceResponse.tokenEvent;
			paymentInstr.custom.wpTokenReason = serviceResponse.tokenReason;
			paymentInstr.custom.wpTokenEventReference = serviceResponse.tokenEventReference;
			paymentInstr.custom.wpPaymentTokenExpiry = tokenExpiryCal.time;
		});		
	}
	
	return paymentInstr;
}
function readCustomObject(customObjectID) : Object
{
	var readNotifyCustomObjectResult;
	Transaction.wrap(function(){
		readNotifyCustomObjectResult = require('int_worldpay/cartridge/scripts/pipelets/ReadNotifyCustomObject').readNotifyCustomObject(customObjectID);
	});
	return readNotifyCustomObjectResult;
}
function removeCustomObject( customObjectID ) : Object
{
	var removeCustomObjectResult;
	Transaction.wrap(function(){
		removeCustomObjectResult = require('int_worldpay/cartridge/scripts/pipelets/RemoveNotifyCustomObject').removeNotifyCustomObject(customObjectID);
	});
	return removeCustomObjectResult;	
}
/** Exported functions **/
module.exports = {
    updateOrderStatus: updateOrderStatus,
    addOrUpdateToken: addOrUpdateToken,
    updateOrderToken: updateOrderToken,
    readCustomObject:readCustomObject,
    removeCustomObject:removeCustomObject
};